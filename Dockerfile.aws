# version.sh - sets versions as env vars to be used

# Based on: https://github.com/aws/aws-cli/issues/4685#issuecomment-829600284
FROM python:3-alpine3.13 AS aws-build
RUN apk add --no-cache \
    gcc \
    git \
    libc-dev \
    libffi-dev \
    openssl-dev \
    py3-pip \
    zlib-dev \
    make \
    cmake
RUN source version.sh && \
    git clone --recursive  --depth 1 --branch ${AWSCLI_VERSION} --single-branch https://github.com/aws/aws-cli.git
WORKDIR /aws-cli
# Follow https://github.com/six8/pyinstaller-alpine to install pyinstaller on alpine
RUN pip install --no-cache-dir --upgrade pip \
    && pip install --no-cache-dir pycrypto \
    && git clone --depth 1 --single-branch --branch v$(grep PyInstaller requirements-build.txt | cut -d'=' -f3) https://github.com/pyinstaller/pyinstaller.git /tmp/pyinstaller \
    && cd /tmp/pyinstaller/bootloader \
    && CFLAGS="-Wno-stringop-overflow -Wno-stringop-truncation" python ./waf configure --no-lsb all \
    && pip install .. \
    && rm -Rf /tmp/pyinstaller \
    && cd - \
    && boto_ver=$(grep botocore setup.cfg | cut -d'=' -f3) \
    && git clone --single-branch --branch v2 https://github.com/boto/botocore /tmp/botocore \
    && cd /tmp/botocore \
    && git checkout $(git log --grep $boto_ver --pretty=format:"%h") \
    && pip install . \
    && rm -Rf /tmp/botocore  \
    && cd -
RUN sed -i '/botocore/d' requirements.txt \
    && scripts/installers/make-exe
RUN unzip dist/awscli-exe.zip && \
    ./aws/install --bin-dir /aws-cli-bin


FROM golang:1.14-alpine AS terraform-build
RUN apk add --no-cache git
WORKDIR /tmp/drone-terraform
COPY . .
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -tags netgo -o /go/bin/drone-terraform
RUN source version.sh && \
    wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_${TERRAFORM_OS}.zip -O terraform.zip && \
    unzip terraform.zip -d /bin


FROM alpine:3.12
RUN apk add --update --no-cache \
    ca-certificates \
    git \
    openssh-client \
    groff
COPY --from=terraform-build /go/bin/drone-terraform /bin/terraform /bin/
COPY --from=aws-build /usr/local/aws-cli/ /usr/local/aws-cli/
COPY --from=aws-build /aws-cli-bin/ /usr/local/bin/
ENTRYPOINT ["/bin/drone-terraform"]
